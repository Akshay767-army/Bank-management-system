import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class BankManagementSystem {

    // HashMap to store user accounts
    private static Map<Integer, Account> accounts = new HashMap<>();
    private static Map<Integer, User> users = new HashMap<>();
    private static int accountIdCounter = 1;  // Counter for account IDs
    private static int userIdCounter = 1;  // Counter for user IDs

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Bank Management System");
            System.out.println("1. Create Account");
            System.out.println("2. Deposit");
            System.out.println("3. Withdraw");
            System.out.println("4. Check Balance");
            System.out.println("5. View Customer Details");
            System.out.println("6. View All Accounts");
            System.out.println("7. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    createAccount(scanner);
                    break;
                case 2:
                    deposit(scanner);
                    break;
                case 3:
                    withdraw(scanner);
                    break;
                case 4:
                    checkBalance(scanner);
                    break;
                case 5:
                    viewCustomerDetails(scanner);
                    break;
                case 6:
                    viewAllAccounts();
                    break;
                case 7:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice, try again.");
            }
        }
    }

    // Create a new account
    private static void createAccount(Scanner scanner) {
        System.out.print("Enter username: ");
        String username = scanner.next();
        System.out.print("Enter password: ");
        String password = scanner.next();
        System.out.print("Enter email: ");
        String email = scanner.next();

        // Create a new user and account
        User user = new User(userIdCounter++, username, password, email);
        users.put(user.getUserId(), user);
        Account account = new Account(accountIdCounter++, user.getUserId(), 0.0);

        // Store account in the map
        accounts.put(account.getAccountId(), account);

        System.out.println("Account created successfully! Account ID: " + account.getAccountId());
    }

    // Deposit money into an account
    private static void deposit(Scanner scanner) {
        System.out.print("Enter account ID: ");
        int accountId = scanner.nextInt();
        Account account = accounts.get(accountId);

        if (account != null) {
            System.out.print("Enter deposit amount: ");
            double amount = scanner.nextDouble();
            account.setBalance(account.getBalance() + amount);
            System.out.println("Deposit successful! New balance: " + account.getBalance());
        } else {
            System.out.println("Account not found.");
        }
    }

    // Withdraw money from an account
    private static void withdraw(Scanner scanner) {
        System.out.print("Enter account ID: ");
        int accountId = scanner.nextInt();
        Account account = accounts.get(accountId);

        if (account != null) {
            System.out.print("Enter withdrawal amount: ");
            double amount = scanner.nextDouble();

            if (amount <= account.getBalance()) {
                account.setBalance(account.getBalance() - amount);
                System.out.println("Withdrawal successful! New balance: " + account.getBalance());
            } else {
                System.out.println("Insufficient funds.");
            }
        } else {
            System.out.println("Account not found.");
        }
    }

    // Check the balance of an account
    private static void checkBalance(Scanner scanner) {
        System.out.print("Enter account ID: ");
        int accountId = scanner.nextInt();
        Account account = accounts.get(accountId);

        if (account != null) {
            System.out.println("Current balance: " + account.getBalance());
        } else {
            System.out.println("Account not found.");
        }
    }

    // View customer details based on account ID
    private static void viewCustomerDetails(Scanner scanner) {
        System.out.print("Enter account ID to view customer details: ");
        int accountId = scanner.nextInt();
        Account account = accounts.get(accountId);

        if (account != null) {
            User user = users.get(account.getUserId());
            System.out.println("Customer Details:");
            System.out.println("Username: " + user.getUsername());
            System.out.println("Email: " + user.getEmail());
            System.out.println("Account ID: " + account.getAccountId());
            System.out.println("Balance: " + account.getBalance());
        } else {
            System.out.println("Account not found.");
        }
    }

    // View all accounts in the bank
    private static void viewAllAccounts() {
        if (accounts.isEmpty()) {
            System.out.println("No accounts available.");
        } else {
            System.out.println("All Accounts:");
            for (Account account : accounts.values()) {
                User user = users.get(account.getUserId());
                System.out.println("Account ID: " + account.getAccountId());
                System.out.println("Username: " + user.getUsername());
                System.out.println("Email: " + user.getEmail());
                System.out.println("Balance: " + account.getBalance());
                System.out.println("-------------------------");
            }
        }
    }
}

// User class to represent a user
class User {
    private int userId;
    private String username;
    private String password;
    private String email;

    public User(int userId, String username, String password, String email) {
        this.userId = userId;
        this.username = username;
        this.password = password;
        this.email = email;
    }

    public int getUserId() {
        return userId;
    }

    public String getUsername() {
        return username;
    }

    public String getEmail() {
        return email;
    }
}

// Account class to represent a bank account
class Account {
    private int accountId;
    private int userId;
    private double balance;

    public Account(int accountId, int userId, double balance) {
        this.accountId = accountId;
        this.userId = userId;
        this.balance = balance;
    }

    public int getAccountId() {
        return accountId;
    }

    public int getUserId() {
        return userId;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }
}
